// Autogenerated from Pigeon (v4.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif


/// Generated class from Pigeon.
///Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol BinaryApi {
  func process(imageData: [UInt8])
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class BinaryApiSetup {
  /// The codec used by BinaryApi.
  /// Sets up an instance of `BinaryApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: BinaryApi?) {
    let processChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.BinaryApi.process", binaryMessenger: binaryMessenger)
    if let api = api {
      processChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let imageDataArg = args[0] as! [UInt8]
        api.process(imageData: imageDataArg)
        reply(nil)
      }
    } else {
      processChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [String: Any?] {
  return ["result": result]
}

private func wrapError(_ error: FlutterError) -> [String: Any?] {
  return [
    "error": [
      "code": error.code,
      "message": error.message,
      "details": error.details
    ]
  ]
}
